
services:
  postgres:
    image: postgres:15-alpine
    container_name: eventscrape-postgres
    environment:
      POSTGRES_DB: eventscrape
      POSTGRES_USER: eventscrape
      POSTGRES_PASSWORD: eventscrape_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eventscrape -d eventscrape"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - eventscrape

  redis:
    image: redis:7-alpine
    container_name: eventscrape-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - eventscrape

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eventscrape-api
    ports:
      - "3001:3001"
    environment:
      DATABASE_URL: postgres://eventscrape:eventscrape_dev@postgres:5432/eventscrape
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
      PORT: 3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eventscrape
    restart: unless-stopped

  admin:
    build:
      context: .
      dockerfile: Dockerfile
      target: admin
      args:
        ADMIN_API_URL: http://api:3001/api
    container_name: eventscrape-admin
    ports:
      - "3000:3000"
    environment:
      VITE_API_URL: http://api:3001/api
      NODE_ENV: production
    depends_on:
      - api
    networks:
      - eventscrape
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: eventscrape-worker
    environment:
      DATABASE_URL: postgres://eventscrape:eventscrape_dev@postgres:5432/eventscrape
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
      PLAYWRIGHT_HEADLESS: "true"
      EXPORT_DIR: /data/exports
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - export_data:/data/exports
    networks:
      - eventscrape
    restart: unless-stopped
    profiles:
      - with-worker

networks:
  eventscrape:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  export_data:
